Ich benötige Unterstützung bei der Entwicklung einer Visual Studio Code Extension für Dynamics Business Central AL Entwickler. Die Extension soll folgende Kernfunktionalitäten bieten:

1. Automatisierte Tests direkt aus Visual Studio Code heraus ausführen.
2. Anhand von Git-Änderungen selektiv Tests ausführen.
3. Business Central AL Projekte kompilieren und veröffentlichen.
4. Testergebnisse in die Commit-Nachricht einfügen.
5. Eine einfache Test Suite Verwaltung bieten.

### Einführung
Ich bin Mitglied eines Dynamics Business Central AL Entwicklerteams. Wir entwickeln für zwei BC Branchenlösungen (Healthcare und Medtec) und haben viele automatisierte Tests, die lange Laufzeiten haben. Wir suchen nach einer Möglichkeit, effizient und zielgerichtet zu testen, bevor wir Pull-Requests absetzen.

### Komponenten
Die Lösung besteht aus zwei Hauptkomponenten:
1. **Business Central App "Business Central AL Test Runner"**
2. **Visual Studio Code Extension "Business Central AL Test Runner"**

#### Business Central App
Die App bietet WebServices für:
- **TestSuite Management**: Anlegen, Hinzufügen und Löschen von TestSuites.
- **Test Execution**: Ausführen und Export/Download von Testergebnissen.
- **Mapping & Exclusion Management**: Erstellung und Export/Import von Objekt-/Testfall-Mappings und Ausschlussdateien.

#### Visual Studio Code Extension
Die Extension bietet:
- **Projekt-Erkennung**: Automatische Erkennung von Main- und Test-Projekten anhand der app.json Dependencies.
- **Compiler- und Objekt-Erkennung**: Lokalisierung des AL-Kompilers und Erkennung von Git-Änderungen.
- **Konfigurations- und Credentials-Management**: Auswahl einer Launch.json Konfiguration und Speicherung von Anmeldedaten.
- **Fehlertolerante Kompilierung und Veröffentlichung**: Kompilierung und Veröffentlichung von Projekten, wobei nur Fehler relevant sind.
- **Ansicht "BC Test Runner"**: Baumartige Struktur zur Verwaltung und Ausführung von Tests:
  - **Ebene 1**: Zielumgebungen (aus launch.json Konfigurationen).
  - **Ebene 2**: Test-Suites der Zielumgebung.
  - **Ebene 3**: Test-Cases der Test-Suite.
  - **Ebene 4**: Zusatzinfo zum Test-Case (z.B. Fehlermeldungen).
- **Verwaltung Test Suite**: Menüpunkte wie Aktualisieren, Selektieren, Test Suite neu anlegen, Test Suite anzeigen, Run Tests, Rebuild & Run Tests, Stop Test.
- **Ansicht "Test Changes"**: Eingruppiert in "Source Control" View, zeigt relevante Test-Cases basierend auf Git-Änderungen:
  - **Ebene 1**: Ausgewählte Test-Suite.
  - **Ebene 2**: Relevante Test-Cases.
  - **Ebene 3**: Zusatzinfo zum Test-Case.
  - Menüpunkte: Run Tests, Rebuild & Run Tests, Stop Test.
- **Commit-Integration**: Erweiterung der "Git Commitmessage" Ansicht um einen "Rebuild & Test Changes" Menüpunkt:
  - Ermittlung und Ausführung der relevanten Tests.
  - Automatisiertes Anfügen der Testergebnisse an die Commit-Message.

### Visual Studio Code Extension Unit Tests
Ein Beispielprojekt im Verzeichnis "..\VSC-BusinessCentral-Test-Runner-BC-Test-Resources\" enthält zwei Dynamics Business Central Visual Studio Projekte für die Main-App `testresource-app` und die Testapp `testresource-testapp`. Die Tests können unter realistischen Bedingungen durchgeführt werden.

Bitte hilf mir bei der weiteren Entwicklung und Optimierung dieser Extension.